//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 4 view controllers.
  struct segue {
    /// This struct is generated for `DayTableVC`, and contains static references to 1 segues.
    struct dayTableVC {
      /// Segue identifier `DayToTrain`.
      static let dayToTrain: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DayTableVC, TrainListVC> = Rswift.StoryboardSegueIdentifier(identifier: "DayToTrain")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `DayToTrain`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func dayToTrain(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DayTableVC, TrainListVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.dayTableVC.dayToTrain, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `MainVC`, and contains static references to 1 segues.
    struct mainVC {
      /// Segue identifier `TypeToDay`.
      static let typeToDay: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainVC, DayTableVC> = Rswift.StoryboardSegueIdentifier(identifier: "TypeToDay")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `TypeToDay`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func typeToDay(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainVC, DayTableVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainVC.typeToDay, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `TrainListVC`, and contains static references to 1 segues.
    struct trainListVC {
      /// Segue identifier `TrainToImage`.
      static let trainToImage: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TrainListVC, TrainVC> = Rswift.StoryboardSegueIdentifier(identifier: "TrainToImage")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `TrainToImage`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func trainToImage(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TrainListVC, TrainVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.trainListVC.trainToImage, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `TrainVC`, and contains static references to 1 segues.
    struct trainVC {
      /// Segue identifier `ToTone`.
      static let toTone: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TrainVC, ToneVC> = Rswift.StoryboardSegueIdentifier(identifier: "ToTone")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `ToTone`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toTone(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TrainVC, ToneVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.trainVC.toTone, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `Alarm.mp3`.
    static let alarmMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "Alarm", pathExtension: "mp3")
    /// Resource file `Ascending.mp3`.
    static let ascendingMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "Ascending", pathExtension: "mp3")
    /// Resource file `Danger.mp3`.
    static let dangerMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "Danger", pathExtension: "mp3")

    /// `bundle.url(forResource: "Alarm", withExtension: "mp3")`
    static func alarmMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.alarmMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Ascending", withExtension: "mp3")`
    static func ascendingMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ascendingMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Danger", withExtension: "mp3")`
    static func dangerMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dangerMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `TheCell`.
    static let theCell: Rswift.ReuseIdentifier<MainCell> = Rswift.ReuseIdentifier(identifier: "TheCell")
    /// Reuse identifier `TheDayCell`.
    static let theDayCell: Rswift.ReuseIdentifier<DayCellVC> = Rswift.ReuseIdentifier(identifier: "TheDayCell")
    /// Reuse identifier `TheTrainCell`.
    static let theTrainCell: Rswift.ReuseIdentifier<TrainListCellVC> = Rswift.ReuseIdentifier(identifier: "TheTrainCell")
    /// Reuse identifier `ToneCell`.
    static let toneCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "ToneCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Main"
      let theDayTableVC = StoryboardViewControllerResource<DayTableVC>(identifier: "TheDayTableVC")
      let theImageVC = StoryboardViewControllerResource<TrainVC>(identifier: "TheImageVC")
      let theTrainVC = StoryboardViewControllerResource<TrainListVC>(identifier: "TheTrainVC")
      let toneVC = StoryboardViewControllerResource<ToneVC>(identifier: "ToneVC")
      let viewController = StoryboardViewControllerResource<MainVC>(identifier: "ViewController")

      func theDayTableVC(_: Void = ()) -> DayTableVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: theDayTableVC)
      }

      func theImageVC(_: Void = ()) -> TrainVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: theImageVC)
      }

      func theTrainVC(_: Void = ()) -> TrainListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: theTrainVC)
      }

      func toneVC(_: Void = ()) -> ToneVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: toneVC)
      }

      func viewController(_: Void = ()) -> MainVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: viewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().theDayTableVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'theDayTableVC' could not be loaded from storyboard 'Main' as 'DayTableVC'.") }
        if _R.storyboard.main().theImageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'theImageVC' could not be loaded from storyboard 'Main' as 'TrainVC'.") }
        if _R.storyboard.main().theTrainVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'theTrainVC' could not be loaded from storyboard 'Main' as 'TrainListVC'.") }
        if _R.storyboard.main().toneVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'toneVC' could not be loaded from storyboard 'Main' as 'ToneVC'.") }
        if _R.storyboard.main().viewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'viewController' could not be loaded from storyboard 'Main' as 'MainVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
